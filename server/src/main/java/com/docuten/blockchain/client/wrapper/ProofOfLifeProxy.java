package com.docuten.blockchain.client.wrapper;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class ProofOfLifeProxy extends Contract {
    private static final String BINARY = "0x6080604052600060025534801561001557600080fd5b506040516020806133658339810180604052602081101561003557600080fd5b810190808051906020019092919050505080600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050613214806101516000396000f3fe60806040526004361061016a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063177d2a741461016f5780631828983a146101c05780633042379114610229578063385e02101461031e57806339f7b69d1461044f5780633e36da48146105b857806341441e2a146105e7578063435b022f146106365780635c71e7ad146106855780636e8cc87f146107b657806371f94e83146108e75780637214ace7146109365780637320a28714610a9f5780637ddfc7d414610ab65780638a701ed114610b5c578063a362390a14610bd7578063a4e2d63414610c2e578063a69df4b514610c5d578063ad0eafec14610c74578063bba9a35214610ce3578063c1292cc314610d34578063c85eb04714610d5f578063cb9dd53414610e13578063ce606ee014610f08578063e556977314610f5f578063f3c6d71a14610fae578063f83d08ba14610fff578063feab077714611016575b600080fd5b34801561017b57600080fd5b506101be6004803603602081101561019257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061102d565b005b3480156101cc57600080fd5b5061020f600480360360208110156101e357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061135d565b604051808215151515815260200191505060405180910390f35b34801561023557600080fd5b506102626004803603602081101561024c57600080fd5b810190808035906020019092919050505061137d565b60405180858152602001848152602001806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156102e05780820151818401526020810190506102c5565b50505050905090810190601f16801561030d5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561032a57600080fd5b506103616004803603604081101561034157600080fd5b81019080803590602001909291908035906020019092919050505061148b565b604051808060200180602001848152602001838103835286818151815260200191508051906020019080838360005b838110156103ab578082015181840152602081019050610390565b50505050905090810190601f1680156103d85780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156104115780820151818401526020810190506103f6565b50505050905090810190601f16801561043e5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561045b57600080fd5b506105b66004803603606081101561047257600080fd5b81019080803590602001909291908035906020019064010000000081111561049957600080fd5b8201836020820111156104ab57600080fd5b803590602001918460018302840111640100000000831117156104cd57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561053057600080fd5b82018360208201111561054257600080fd5b8035906020019184600183028401116401000000008311171561056457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611669565b005b3480156105c457600080fd5b506105cd611938565b604051808215151515815260200191505060405180910390f35b3480156105f357600080fd5b506106206004803603602081101561060a57600080fd5b810190808035906020019092919050505061194b565b6040518082815260200191505060405180910390f35b34801561064257600080fd5b5061066f6004803603602081101561065957600080fd5b8101908080359060200190929190505050611978565b6040518082815260200191505060405180910390f35b34801561069157600080fd5b506106c8600480360360408110156106a857600080fd5b810190808035906020019092919080359060200190929190505050611990565b604051808060200180602001848152602001838103835286818151815260200191508051906020019080838360005b838110156107125780820151818401526020810190506106f7565b50505050905090810190601f16801561073f5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b8381101561077857808201518184015260208101905061075d565b50505050905090810190601f1680156107a55780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156107c257600080fd5b506107f9600480360360408110156107d957600080fd5b8101908080359060200190929190803590602001909291905050506119b9565b604051808060200180602001848152602001838103835286818151815260200191508051906020019080838360005b83811015610843578082015181840152602081019050610828565b50505050905090810190601f1680156108705780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156108a957808201518184015260208101905061088e565b50505050905090810190601f1680156108d65780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156108f357600080fd5b506109206004803603602081101561090a57600080fd5b8101908080359060200190929190505050611b2f565b6040518082815260200191505060405180910390f35b34801561094257600080fd5b50610a9d6004803603606081101561095957600080fd5b81019080803590602001909291908035906020019064010000000081111561098057600080fd5b82018360208201111561099257600080fd5b803590602001918460018302840111640100000000831117156109b457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610a1757600080fd5b820183602082011115610a2957600080fd5b80359060200191846001830284011164010000000083111715610a4b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611b47565b005b348015610aab57600080fd5b50610ab4611e3c565b005b348015610ac257600080fd5b50610b0560048036036020811015610ad957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612134565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610b48578082015181840152602081019050610b2d565b505050509050019250505060405180910390f35b348015610b6857600080fd5b50610b9560048036036020811015610b7f57600080fd5b81019080803590602001909291905050506121cb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610be357600080fd5b50610bec6121fe565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610c3a57600080fd5b50610c43612224565b604051808215151515815260200191505060405180910390f35b348015610c6957600080fd5b50610c72612237565b005b348015610c8057600080fd5b50610ccd60048036036040811015610c9757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061252f565b6040518082815260200191505060405180910390f35b348015610cef57600080fd5b50610d3260048036036020811015610d0657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061255f565b005b348015610d4057600080fd5b50610d496126b4565b6040518082815260200191505060405180910390f35b348015610d6b57600080fd5b50610d9860048036036020811015610d8257600080fd5b81019080803590602001909291905050506126ba565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610dd8578082015181840152602081019050610dbd565b50505050905090810190601f168015610e055780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610e1f57600080fd5b50610e4c60048036036020811015610e3657600080fd5b810190808035906020019092919050505061276a565b60405180858152602001848152602001806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015610eca578082015181840152602081019050610eaf565b50505050905090810190601f168015610ef75780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b348015610f1457600080fd5b50610f1d612885565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610f6b57600080fd5b50610f9860048036036020811015610f8257600080fd5b81019080803590602001909291905050506128ab565b6040518082815260200191505060405180910390f35b348015610fba57600080fd5b50610ffd60048036036020811015610fd157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506128c8565b005b34801561100b57600080fd5b50611014612bf8565b005b34801561102257600080fd5b5061102b612ef0565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561113e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260478152602001807f452d504f4c502d303031202d204f6e6c79207468652070726f787920636f6e7481526020017f72616374206f776e65722061646420657865637574652074686973207472616e81526020017f73616374696f6e0000000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b60006060600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683604051602401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506040516020818303038152906040527f177d2a74000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310151561126a5780518252602082019150602081019050602083039250611245565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146112ca576040519150601f19603f3d011682016040523d82523d6000602084013e6112cf565b606091505b50915091508115611353577f1be77fb289cfaf0382d7113e77bb87b4ce9ff776ce290a27e92991246140bd7b82604051808060200183151515158152602001828103825260118152602001807f616464417574686f72697a6564557365720000000000000000000000000000008152506020019250505060405180910390a1611358565b600080fd5b505050565b60006020528060005260406000206000915054906101000a900460ff1681565b60008060606000846006600087815260200190815260200160002054600560008881526020019081526020016000206004600089815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114755780601f1061144a57610100808354040283529160200191611475565b820191906000526020600020905b81548152906001019060200180831161145857829003601f168201915b5050505050915093509350935093509193509193565b606080600060086000868152602001908152602001600020848154811015156114b057fe5b906000526020600020906003020160000160086000878152602001908152602001600020858154811015156114e157fe5b9060005260206000209060030201600101600860008881526020019081526020016000208681548110151561151257fe5b906000526020600020906003020160020154828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115b95780601f1061158e576101008083540402835291602001916115b9565b820191906000526020600020905b81548152906001019060200180831161159c57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116555780601f1061162a57610100808354040283529160200191611655565b820191906000526020600020905b81548152906001019060200180831161163857829003601f168201915b505050505091509250925092509250925092565b60006060600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16858585604051602401808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156116f65780820151818401526020810190506116db565b50505050905090810190601f1680156117235780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561175c578082015181840152602081019050611741565b50505050905090810190601f1680156117895780820380516001836020036101000a031916815260200191505b50955050505050506040516020818303038152906040527f39f7b69d000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083101515611843578051825260208201915060208101905060208303925061181e565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146118a3576040519150601f19603f3d011682016040523d82523d6000602084013e6118a8565b606091505b5091509150811561192c577f1be77fb289cfaf0382d7113e77bb87b4ce9ff776ce290a27e92991246140bd7b82604051808060200183151515158152602001828103825260138152602001807f617070656e6441756469745265676973747279000000000000000000000000008152506020019250505060405180910390a1611931565b600080fd5b5050505050565b600160149054906101000a900460ff1681565b600080611957836128ab565b90506008600082815260200190815260200160002080549050915050919050565b60036020528060005260406000206000915090505481565b60608060008061199f866128ab565b90506119ab818661148b565b935093509350509250925092565b6008602052816000526040600020818154811015156119d457fe5b906000526020600020906003020160009150915050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a815780601f10611a5657610100808354040283529160200191611a81565b820191906000526020600020905b815481529060010190602001808311611a6457829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b1f5780601f10611af457610100808354040283529160200191611b1f565b820191906000526020600020905b815481529060010190602001808311611b0257829003601f168201915b5050505050908060020154905083565b60066020528060005260406000206000915090505481565b60006060600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16858585604051602401808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611bd4578082015181840152602081019050611bb9565b50505050905090810190601f168015611c015780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611c3a578082015181840152602081019050611c1f565b50505050905090810190601f168015611c675780820380516001836020036101000a031916815260200191505b50955050505050506040516020818303038152906040527f7214ace7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083101515611d215780518252602082019150602081019050602083039250611cfc565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114611d81576040519150601f19603f3d011682016040523d82523d6000602084013e611d86565b606091505b50915091508115611e30577f1be77fb289cfaf0382d7113e77bb87b4ce9ff776ce290a27e92991246140bd7b82604051808060200183151515158152602001828103825260238152602001807f63657274696679446f63756d656e744372656174696f6e57697468495046534881526020017f61736800000000000000000000000000000000000000000000000000000000008152506040019250505060405180910390a1611e35565b600080fd5b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f4d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260478152602001807f452d504f4c502d303031202d204f6e6c79207468652070726f787920636f6e7481526020017f72616374206f776e65722061646420657865637574652074686973207472616e81526020017f73616374696f6e0000000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b60006060600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f7320a287000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083101515612042578051825260208201915060208101905060208303925061201d565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146120a2576040519150601f19603f3d011682016040523d82523d6000602084013e6120a7565b606091505b5091509150811561212b577f1be77fb289cfaf0382d7113e77bb87b4ce9ff776ce290a27e92991246140bd7b82604051808060200183151515158152602001828103825260168152602001807f636c6f7365546f417574686f72697a65645573657273000000000000000000008152506020019250505060405180910390a1612130565b600080fd5b5050565b6060600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156121bf57602002820191906000526020600020905b8154815260200190600101908083116121ab575b50505050509050919050565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160159054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612348576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260478152602001807f452d504f4c502d303031202d204f6e6c79207468652070726f787920636f6e7481526020017f72616374206f776e65722061646420657865637574652074686973207472616e81526020017f73616374696f6e0000000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b60006060600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660405180807f756e6c6f636b28290000000000000000000000000000000000000000000000008152506008019050604051809103902060405160200180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526004019150506040516020818303038152906040526040518082805190602001908083835b60208310151561244d5780518252602082019150602081019050602083039250612428565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146124ad576040519150601f19603f3d011682016040523d82523d6000602084013e6124b2565b606091505b50915091507f1be77fb289cfaf0382d7113e77bb87b4ce9ff776ce290a27e92991246140bd7b82604051808060200183151515158152602001828103825260068152602001807f756e6c6f636b00000000000000000000000000000000000000000000000000008152506020019250505060405180910390a15050565b60076020528160005260406000208181548110151561254a57fe5b90600052602060002001600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612670576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260478152602001807f452d504f4c502d303031202d204f6e6c79207468652070726f787920636f6e7481526020017f72616374206f776e65722061646420657865637574652074686973207472616e81526020017f73616374696f6e0000000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60025481565b60056020528060005260406000206000915090508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127625780601f1061273757610100808354040283529160200191612762565b820191906000526020600020905b81548152906001019060200180831161274557829003601f168201915b505050505081565b600080606060008061277b866128ab565b9050806006600083815260200190815260200160002054600560008481526020019081526020016000206004600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561286e5780601f106128435761010080835404028352916020019161286e565b820191906000526020600020905b81548152906001019060200180831161285157829003601f168201915b505050505091509450945094509450509193509193565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060036000838152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156129d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260478152602001807f452d504f4c502d303031202d204f6e6c79207468652070726f787920636f6e7481526020017f72616374206f776e65722061646420657865637574652074686973207472616e81526020017f73616374696f6e0000000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b60006060600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683604051602401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506040516020818303038152906040527ff3c6d71a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083101515612b055780518252602082019150602081019050602083039250612ae0565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114612b65576040519150601f19603f3d011682016040523d82523d6000602084013e612b6a565b606091505b50915091508115612bee577f1be77fb289cfaf0382d7113e77bb87b4ce9ff776ce290a27e92991246140bd7b82604051808060200183151515158152602001828103825260118152602001807f72656d6f766543726564656e7469616c730000000000000000000000000000008152506020019250505060405180910390a1612bf3565b600080fd5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612d09576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260478152602001807f452d504f4c502d303031202d204f6e6c79207468652070726f787920636f6e7481526020017f72616374206f776e65722061646420657865637574652074686973207472616e81526020017f73616374696f6e0000000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b60006060600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660405180807f6c6f636b282900000000000000000000000000000000000000000000000000008152506006019050604051809103902060405160200180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526004019150506040516020818303038152906040526040518082805190602001908083835b602083101515612e0e5780518252602082019150602081019050602083039250612de9565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114612e6e576040519150601f19603f3d011682016040523d82523d6000602084013e612e73565b606091505b50915091507f1be77fb289cfaf0382d7113e77bb87b4ce9ff776ce290a27e92991246140bd7b82604051808060200183151515158152602001828103825260048152602001807f6c6f636b000000000000000000000000000000000000000000000000000000008152506020019250505060405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613001576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260478152602001807f452d504f4c502d303031202d204f6e6c79207468652070726f787920636f6e7481526020017f72616374206f776e65722061646420657865637574652074686973207472616e81526020017f73616374696f6e0000000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b60006060600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527ffeab0777000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831015156130f657805182526020820191506020810190506020830392506130d1565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114613156576040519150601f19603f3d011682016040523d82523d6000602084013e61315b565b606091505b509150915081156131df577f1be77fb289cfaf0382d7113e77bb87b4ce9ff776ce290a27e92991246140bd7b826040518080602001831515151581526020018281038252600f8152602001807f6f70656e546f45766572795573657200000000000000000000000000000000008152506020019250505060405180910390a16131e4565b600080fd5b505056fea165627a7a723058206097249e308aef214d425e0abe5175b71b8ff41b3aeed0c1f6ecf58f2d8a34ad0029";

    public static final String FUNC_AUTHORIZEDUSERS = "authorizedUsers";

    public static final String FUNC_ISOPENTOEVERYUSER = "isOpenToEveryUser";

    public static final String FUNC_IDBYDOCUMENTHASH = "idByDocumentHash";

    public static final String FUNC_AUDITREGISTRYBYDOCUMENTID = "auditRegistryByDocumentId";

    public static final String FUNC_HASHBYDOCUMENTID = "hashByDocumentId";

    public static final String FUNC_OWNERBYDOCUMENTID = "ownerByDocumentId";

    public static final String FUNC_DELEGATECALLADDRESS = "delegateCallAddress";

    public static final String FUNC_ISLOCKED = "isLocked";

    public static final String FUNC_DOCUMENTSBYOWNERADDRESS = "documentsByOwnerAddress";

    public static final String FUNC_LASTID = "lastId";

    public static final String FUNC_IPFSHASHBYDOCUMENTID = "ipfsHashByDocumentId";

    public static final String FUNC_CONTRACTOWNER = "contractOwner";

    public static final String FUNC_UPDATEDELEGATECALLADDRESS = "updateDelegateCallAddress";

    public static final String FUNC_LOCK = "lock";

    public static final String FUNC_UNLOCK = "unlock";

    public static final String FUNC_ADDAUTHORIZEDUSER = "addAuthorizedUser";

    public static final String FUNC_REMOVECREDENTIALS = "removeCredentials";

    public static final String FUNC_OPENTOEVERYUSER = "openToEveryUser";

    public static final String FUNC_CLOSETOAUTHORIZEDUSERS = "closeToAuthorizedUsers";

    public static final String FUNC_CERTIFYDOCUMENTCREATIONWITHIPFSHASH = "certifyDocumentCreationWithIPFSHash";

    public static final String FUNC_APPENDAUDITREGISTRY = "appendAuditRegistry";

    public static final String FUNC_GETDOCUMENTSBYOWNER = "getDocumentsByOwner";

    public static final String FUNC_GETDOCUMENTDETAILSBYHASH = "getDocumentDetailsByHash";

    public static final String FUNC_GETAUDITREGISTRYBYDOCUMENTHASH = "getAuditRegistryByDocumentHash";

    public static final String FUNC_COUNTAUDITREGISTRIESBYDOCUMENTHASH = "countAuditRegistriesByDocumentHash";

    public static final String FUNC_GETDOCUMENTDETAILSBYID = "getDocumentDetailsById";

    public static final String FUNC_GETAUDITREGISTRYBYDOCUMENTID = "getAuditRegistryByDocumentId";

    public static final String FUNC_GETID = "getId";

    public static final Event DELEGATECALLEVENT_EVENT = new Event("DelegateCallEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("3", "0xCE8434e2b404008289877dbe12346d8e3Ef190fD");
        _addresses.put("5777", "0xeF57FfB9a2511bceAe2115ED9a1B39Ff98018F99");
        _addresses.put("4447", "0x92aF7E710dDB6d271e1319A3B75d6C54a0366439");
    }

    @Deprecated
    protected ProofOfLifeProxy(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ProofOfLifeProxy(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ProofOfLifeProxy(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ProofOfLifeProxy(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Boolean> isOpenToEveryUser() {
        final Function function = new Function(FUNC_ISOPENTOEVERYUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> delegateCallAddress() {
        final Function function = new Function(FUNC_DELEGATECALLADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> isLocked() {
        final Function function = new Function(FUNC_ISLOCKED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> lastId() {
        final Function function = new Function(FUNC_LASTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> contractOwner() {
        final Function function = new Function(FUNC_CONTRACTOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }


    public RemoteCall<Tuple4<BigInteger, byte[], String, String>> getDocumentDetailsByHash(byte[] _documentHash) {
        final Function function = new Function(FUNC_GETDOCUMENTDETAILSBYHASH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_documentHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple4<BigInteger, byte[], String, String>>(
                new Callable<Tuple4<BigInteger, byte[], String, String>>() {
                    @Override
                    public Tuple4<BigInteger, byte[], String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, byte[], String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<Tuple3<String, String, BigInteger>> getAuditRegistryByDocumentHash(byte[] _documentHash, BigInteger _index) {
        final Function function = new Function(FUNC_GETAUDITREGISTRYBYDOCUMENTHASH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_documentHash), 
                new org.web3j.abi.datatypes.generated.Uint256(_index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple3<String, String, BigInteger>>(
                new Callable<Tuple3<String, String, BigInteger>>() {
                    @Override
                    public Tuple3<String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> countAuditRegistriesByDocumentHash(byte[] _documentHash) {
        final Function function = new Function(FUNC_COUNTAUDITREGISTRIESBYDOCUMENTHASH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_documentHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple4<BigInteger, byte[], String, String>> getDocumentDetailsById(BigInteger _id) {
        final Function function = new Function(FUNC_GETDOCUMENTDETAILSBYID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple4<BigInteger, byte[], String, String>>(
                new Callable<Tuple4<BigInteger, byte[], String, String>>() {
                    @Override
                    public Tuple4<BigInteger, byte[], String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, byte[], String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    @Deprecated
    public static ProofOfLifeProxy load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProofOfLifeProxy(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ProofOfLifeProxy load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProofOfLifeProxy(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    @Deprecated
    public static RemoteCall<ProofOfLifeProxy> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String existingContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(existingContractAddress)));
        return deployRemoteCall(ProofOfLifeProxy.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<ProofOfLifeProxy> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String existingContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(existingContractAddress)));
        return deployRemoteCall(ProofOfLifeProxy.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

}
